/******************************************************************************
Copyright (c) Freescale Semiconductor 2006
File Name		 :	$RCSfile: xgate_XPWM.cxgate,v $
Current Revision :	$Revision: 1.10 $
Notes            :  
*******************************************************************************/
//#include "per_XDx512_L15Y.h"
#include "mc9s12xep100.h"
#include "xgate_config.h"
#include "typedefs.h"
#include "pwm.h"
#include "pwm_cfg.h"

#pragma CODE_SEG XGATE_CODE
#pragma DATA_SEG XGATE_DATA


#pragma DATA_SEG SHARED_DATA
UINT16 u16PITPWMTimeOut = 100;  /* PIT time-out for PWM signal */
#pragma DATA_SEG DEFAULT

/******************************************************************************
PWM initialization
Array cam_crank_channels consists of record of structure type tCamCrankChDescr
For each required PWM channel, identify the relevant port address and pin,
the PWM period and duty cycle, and the starting position

******************************************************************************/

#pragma DATA_SEG SHARED_DATA 


typedef enum
{
  CHANNELPWM0=0, //channel 0 and 1 
  CHANNELPWM1,   //channel 2 and 3
  CHANNELPWM2,   //channel 4 and 5 
  CHANNELPWM3,   //channel 6 and 7 
  CHANNELPWM4,   //channel 0 and 1 
  CHANNELPWM5,   //channel 2 and 3 
  CHANNELPWM6,   //channel 4 and 5 
  CHANNELPWM7,   //channel 6 and 7 
  MAX_PWM_CHANNELS
}tenPwmChanIds;

typedef enum
{
  INTPWM=0,
  MAX_DEVICES
}tenDevices;


typedef struct pwm_configType 
{
  Pwm_ChannelType xChannelType; // Physical Channel ID
  UINT8           u8PwmType;
  UINT8           u8IdleState; //depends on the type of pwm type (A,B,C,D)
  Pwm_PeriodType  xPeriodType; //it shall be multiplied by SA o SB period to know the channel period, it shall be a value between  0x0001 and 0xFFFF uS */
  UINT16          u16DutyCycle; 
}Pwm_ConfigChannel;

typedef struct pwm_configdevice 
{
  UINT8                   u6deviceId;
  UINT8                   u8numberChannels;
  UINT8                   u8pwmsclB; //frecuency for channels 2,3,6,7 must be a value between 0x00 and 0xFF
  UINT8                   u8pwmsclA; //frecuency for channels 0,1,4,5 must be a value between 0x00 and 0xFF
  const Pwm_ConfigChannel *ptrPwm_ConfigType;
}Pwm_ConfigDevice;


typedef struct 
{
    	UINT8                       u8Number_of_PWM_channels;
    	const Pwm_ConfigChannel *  ptr_Pwm_ConfigChannel;
}Pwm_DriverConfig;


const Pwm_ConfigChannel Pwm_ChannelConfig[] =
{                                                                         
//  { CHANNELPWM7,     TYPED,       idleTypeD,        ((Pwm_PeriodType)0x7F),           0x1000        },
//  { CHANNELPWM5,     TYPEB,       idleTypeB,        ((Pwm_PeriodType)0x7F),           0x4000        },
//  { CHANNELPWM3,     TYPEC,       idleTypeC,        ((Pwm_PeriodType)0x7F),           0x2000        },  
  { CHANNELPWM1,     TYPEA,       idleTypeA,        ((Pwm_PeriodType)0x7F),           0x6000        },
//  { CHANNELPWM2,     TYPED,       idleTypeD,        ((Pwm_PeriodType)0xFF),           0x1000        },
//  { CHANNELPWM4,     TYPEB,       idleTypeB,        ((Pwm_PeriodType)0xFF),           0x4000        },
//  { CHANNELPWM6,     TYPEC,       idleTypeC,        ((Pwm_PeriodType)0xFF),           0x2000        },  
  { CHANNELPWM0,     TYPEA,       idleTypeA,        ((Pwm_PeriodType)0xFF),           0x6000        },
};

const Pwm_DriverConfig  Pwm_Config[] =
{ 
    
 {   
       sizeof(Pwm_ChannelConfig)/sizeof(Pwm_ChannelConfig[0]),     
       &Pwm_ChannelConfig[0]                                          
 }
};

extern const Pwm_ConfigChannel Pwm_ChannelConfig[];
//extern const Pwm_DriverConfig Pwm_Config[];
//extern const Pwm_DriverConfig  Pwm_DriverConfig[]; 

#pragma DATA_SEG DEFAULT    

 /* Buffer to hold individual enable flags for each PWM channel */       
static UINT8 Pwm__u8EnableBuffer;                

/*****************************************************************************************************/
/**
* \brief    Initiate configuration of pwm
* \author   Andres Sanchez, Cesar Gomez, Juan Carlos Morales, Pablo Camacho
* \param    
* \return   
*/
/* void Pwm_Init(const Pwm_ConfigChannel* ConfigPtr){*/
/*****************************************************************************************************/

/******************************************************************************
Function Name   : vfnCPWM_Callback
author   Andres Sanchez, Cesar Gomez, Juan Carlos Morales, Pablo Camacho
Parameters      : None
Returns         : None
Notes     		: Cam Crank algorithm implementation. Callback function to be called 
          		  by appropriate ISR
******************************************************************************/
#pragma CODE_SEG XGATE_CODE 
//void interrupt Pwm_Init_Isr(void)
//void interrupt Pwm_Init_Thread(Pwm_ConfigChannel* ConfigPtr) 
//void interrupt Pwm_Init_Isr(const Pwm_ConfigChannel* ConfigPtr)
  //void vfnPwm_Callback(void) 
 void vfnPwm_Callback(void) 
  {                                 
    //	UINT16 u16Delay;
   // 	UINT8  u8Channel;
    	
    Pwm_ChannelType xTempChannId;
    Pwm_PeriodType  xTempPeriod;
    UINT8 u8DeviceIndex;
    UINT8 u8ChannelIndex;
    UINT8 u8Temp;
    UINT16 u16DesiredDuty;
    volatile UINT32 u32DesiredDuty=0;

    	
    //while (!_ssem(PWM_SEMAPHORE)) { }

     if (u16PITPWMTimeOut != 0xFFFF)
     {
        	 		        	 		
      PWMCAE=0x00; /*Left aligned mode to all channels on this device */
      
      #if PWM_HW_TYPE==PWM_16BIT_HW /* 16-bit mode */
      PWMCLK=0xAA; /*selecting  the clock SA and SB source for concatenated channels */ 
      PWMCTL=0xF0; /*it will use the concatenation of (0,1) (2,3) (4,5) (6,7) registers  */
      #elif PWM_HW_TYPE==PWM_16BIT_HW /* 16-bit mode */
      PWMCLK=0xFF; /*selecting  the clock SA and SB source for all channels */ 
      #endif   
      
      Pwm__u8EnableBuffer = 0;
      
      // the pwm output will be in the low order 8bit channel pin PWME7 in the case of 6 and 7 concatenation
      // the pwm polarity will be controlled by by the PPOLx bit of the corresponding low order 8-bit channel, in the case of 6 and 7 concatenation will be PPOL7
      // init all devices, in this case the s12exp100 only has one 
      for(u8DeviceIndex=0; u8DeviceIndex < sizeof(Pwm_ChannelConfig)/sizeof(Pwm_ChannelConfig[0]); u8DeviceIndex++) 
      //for(u8DeviceIndex=0; u8DeviceIndex < PWM_SIZE(Pwm_ChannelConfig,Pwm_ConfigChannel); u8DeviceIndex++) 
      {                                                //PWM_SIZE(Pwm_ChannelConfig,Pwm_ConfigChannel)
        PWMPRCLK=BusClockPeriod;
        PWMSCLA=0x01;//Pwm_Config[u8DeviceIndex].pwmsclA;*/ /*selecting the scaler value A
        PWMSCLB=0x01;//Pwm_Config[u8DeviceIndex].pwmsclB;*/ /*selecting the scaler value B
        u8Temp=0;
        /* Initialize all channels for each device */
        for(u8ChannelIndex=0; u8ChannelIndex <  sizeof(Pwm_ChannelConfig)/sizeof(Pwm_ChannelConfig[0]); u8DeviceIndex++) 
                                                      //PWM_SIZE(Pwm_ChannelConfig,Pwm_ConfigChannel);u8ChannelIndex++)  
        {
        xTempPeriod     = Pwm_Config[u8DeviceIndex].ptr_Pwm_ConfigChannel[u8ChannelIndex].xPeriodType;
        xTempChannId    = Pwm_Config[u8DeviceIndex].ptr_Pwm_ConfigChannel[u8ChannelIndex].xChannelType;
        u16DesiredDuty  = Pwm_Config[u8DeviceIndex].ptr_Pwm_ConfigChannel[u8ChannelIndex].u16DutyCycle;
        
        #if PWM_HW_TYPE==PWM_16BIT_HW
        /* 16-bit mode */
        Pwm_CheckChannelId(&xTempChannId);
        #endif
        
        u8Temp = ON<<xTempChannId;
        Pwm__u8EnableBuffer |= u8Temp;// Prepare the Enabling of the corresponding channel
        
        Pwm_SetPeriodAndDuty(u8ChannelIndex,xTempPeriod,u16DesiredDuty);
        }// CHANNEL for 
    
        PWME |= Pwm__u8EnableBuffer; // Enable ALL CONFIGURED channels at the same time
      }// DEVICE for   	 		   	    	    	    	
    }    
  // Clear interrupt flag 
   // XGATE.xgswt.word = 0x01fe;       //From PWM for XGATE DRV
   
    // Release the hardware semaphore */   
   //  _csem(PWM_SEMAPHORE);
    	    	    	    	
}
  
#pragma CODE_SEG DEFAULT


/*****************************************************************************************************/
/**
* \brief    Deinitialize PWM
* \author  Andres Sanchez, Cesar Gomez, Juan Carlos Morales, Pablo Camacho
* \param    
* \return   
*/
void interrupt Pwm_DeInit_Thread(void)
{
  Pwm__u8EnableBuffer^=0xFF;/* invert the enable mask */
  PWME&=Pwm__u8EnableBuffer;/* disable ALL the enabled channels */
  
  // Clear interrupt flag */
   // XGATE.xgswt.word = 0x01fe;    //From PWM for XGATE DRV
}

/******************************************************************************
Function Name : vfnPWM_Init_XGATE
author   Andres Sanchez, Cesar Gomez, Juan Carlos Morales, Pablo Camacho
Parameters    : None
Returns     : None
Notes     : PWM implementation. Initialization of Callback function 
          to be called by appropriate ISR
******************************************************************************/
#pragma CODE_SEG XGATE_CODE
  void interrupt vfnPwm_Init_XGATE_Isr(void) 
  {                                 
    // Periodic Interrupt Timer Low Level Initialization 
      vfnPIT1_Init(&vfnPwm_Callback, __XGATE_CORE);
    // Clear Software Interrupt request flag 
      XGATE_SW_TRIGGER_X( SOFTWARE_TRIGGER_1, SOFTWARE_TRIGGER_DISABLE);
  }
#pragma CODE_SEG DEFAULT

